{"ast":null,"code":"// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../resource.mjs\";\nexport class Batches extends APIResource {\n  /**\n   * Creates and executes a batch from an uploaded file of requests.\n   * [Learn more](/docs/batch).\n   */\n  create(body, options) {\n    return this._client.post('/openai/v1/batches', {\n      body,\n      ...options\n    });\n  }\n  /**\n   * Retrieves a batch.\n   */\n  retrieve(batchId, options) {\n    return this._client.get(`/openai/v1/batches/${batchId}`, options);\n  }\n  /**\n   * List your organization's batches.\n   */\n  list(options) {\n    return this._client.get('/openai/v1/batches', options);\n  }\n  /**\n   * Cancels a batch.\n   */\n  cancel(batchId, options) {\n    return this._client.post(`/openai/v1/batches/${batchId}/cancel`, options);\n  }\n}","map":{"version":3,"names":["APIResource","Batches","create","body","options","_client","post","retrieve","batchId","get","list","cancel"],"sources":["D:\\KEC\\sem6\\consultancy_project\\qa-automation-system - Copy\\client\\node_modules\\groq-sdk\\src\\resources\\batches.ts"],"sourcesContent":["// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { APIResource } from '../resource';\nimport * as Core from '../core';\n\nexport class Batches extends APIResource {\n  /**\n   * Creates and executes a batch from an uploaded file of requests.\n   * [Learn more](/docs/batch).\n   */\n  create(body: BatchCreateParams, options?: Core.RequestOptions): Core.APIPromise<BatchCreateResponse> {\n    return this._client.post('/openai/v1/batches', { body, ...options });\n  }\n\n  /**\n   * Retrieves a batch.\n   */\n  retrieve(batchId: string, options?: Core.RequestOptions): Core.APIPromise<BatchRetrieveResponse> {\n    return this._client.get(`/openai/v1/batches/${batchId}`, options);\n  }\n\n  /**\n   * List your organization's batches.\n   */\n  list(options?: Core.RequestOptions): Core.APIPromise<BatchListResponse> {\n    return this._client.get('/openai/v1/batches', options);\n  }\n\n  /**\n   * Cancels a batch.\n   */\n  cancel(batchId: string, options?: Core.RequestOptions): Core.APIPromise<BatchCancelResponse> {\n    return this._client.post(`/openai/v1/batches/${batchId}/cancel`, options);\n  }\n}\n\nexport interface BatchCreateResponse {\n  id: string;\n\n  /**\n   * The time frame within which the batch should be processed.\n   */\n  completion_window: string;\n\n  /**\n   * The Unix timestamp (in seconds) for when the batch was created.\n   */\n  created_at: number;\n\n  /**\n   * The API endpoint used by the batch.\n   */\n  endpoint: string;\n\n  /**\n   * The ID of the input file for the batch.\n   */\n  input_file_id: string;\n\n  /**\n   * The object type, which is always `batch`.\n   */\n  object: 'batch';\n\n  /**\n   * The current status of the batch.\n   */\n  status:\n    | 'validating'\n    | 'failed'\n    | 'in_progress'\n    | 'finalizing'\n    | 'completed'\n    | 'expired'\n    | 'cancelling'\n    | 'cancelled';\n\n  /**\n   * The Unix timestamp (in seconds) for when the batch was cancelled.\n   */\n  cancelled_at?: number;\n\n  /**\n   * The Unix timestamp (in seconds) for when the batch started cancelling.\n   */\n  cancelling_at?: number;\n\n  /**\n   * The Unix timestamp (in seconds) for when the batch was completed.\n   */\n  completed_at?: number;\n\n  /**\n   * The ID of the file containing the outputs of requests with errors.\n   */\n  error_file_id?: string;\n\n  errors?: BatchCreateResponse.Errors;\n\n  /**\n   * The Unix timestamp (in seconds) for when the batch expired.\n   */\n  expired_at?: number;\n\n  /**\n   * The Unix timestamp (in seconds) for when the batch will expire.\n   */\n  expires_at?: number;\n\n  /**\n   * The Unix timestamp (in seconds) for when the batch failed.\n   */\n  failed_at?: number;\n\n  /**\n   * The Unix timestamp (in seconds) for when the batch started finalizing.\n   */\n  finalizing_at?: number;\n\n  /**\n   * The Unix timestamp (in seconds) for when the batch started processing.\n   */\n  in_progress_at?: number;\n\n  /**\n   * Set of key-value pairs that can be attached to an object. This can be useful for\n   * storing additional information about the object in a structured format.\n   */\n  metadata?: unknown | null;\n\n  /**\n   * The ID of the file containing the outputs of successfully executed requests.\n   */\n  output_file_id?: string;\n\n  /**\n   * The request counts for different statuses within the batch.\n   */\n  request_counts?: BatchCreateResponse.RequestCounts;\n}\n\nexport namespace BatchCreateResponse {\n  export interface Errors {\n    data?: Array<Errors.Data>;\n\n    /**\n     * The object type, which is always `list`.\n     */\n    object?: string;\n  }\n\n  export namespace Errors {\n    export interface Data {\n      /**\n       * An error code identifying the error type.\n       */\n      code?: string;\n\n      /**\n       * The line number of the input file where the error occurred, if applicable.\n       */\n      line?: number | null;\n\n      /**\n       * A human-readable message providing more details about the error.\n       */\n      message?: string;\n\n      /**\n       * The name of the parameter that caused the error, if applicable.\n       */\n      param?: string | null;\n    }\n  }\n\n  /**\n   * The request counts for different statuses within the batch.\n   */\n  export interface RequestCounts {\n    /**\n     * Number of requests that have been completed successfully.\n     */\n    completed: number;\n\n    /**\n     * Number of requests that have failed.\n     */\n    failed: number;\n\n    /**\n     * Total number of requests in the batch.\n     */\n    total: number;\n  }\n}\n\nexport interface BatchRetrieveResponse {\n  id: string;\n\n  /**\n   * The time frame within which the batch should be processed.\n   */\n  completion_window: string;\n\n  /**\n   * The Unix timestamp (in seconds) for when the batch was created.\n   */\n  created_at: number;\n\n  /**\n   * The API endpoint used by the batch.\n   */\n  endpoint: string;\n\n  /**\n   * The ID of the input file for the batch.\n   */\n  input_file_id: string;\n\n  /**\n   * The object type, which is always `batch`.\n   */\n  object: 'batch';\n\n  /**\n   * The current status of the batch.\n   */\n  status:\n    | 'validating'\n    | 'failed'\n    | 'in_progress'\n    | 'finalizing'\n    | 'completed'\n    | 'expired'\n    | 'cancelling'\n    | 'cancelled';\n\n  /**\n   * The Unix timestamp (in seconds) for when the batch was cancelled.\n   */\n  cancelled_at?: number;\n\n  /**\n   * The Unix timestamp (in seconds) for when the batch started cancelling.\n   */\n  cancelling_at?: number;\n\n  /**\n   * The Unix timestamp (in seconds) for when the batch was completed.\n   */\n  completed_at?: number;\n\n  /**\n   * The ID of the file containing the outputs of requests with errors.\n   */\n  error_file_id?: string;\n\n  errors?: BatchRetrieveResponse.Errors;\n\n  /**\n   * The Unix timestamp (in seconds) for when the batch expired.\n   */\n  expired_at?: number;\n\n  /**\n   * The Unix timestamp (in seconds) for when the batch will expire.\n   */\n  expires_at?: number;\n\n  /**\n   * The Unix timestamp (in seconds) for when the batch failed.\n   */\n  failed_at?: number;\n\n  /**\n   * The Unix timestamp (in seconds) for when the batch started finalizing.\n   */\n  finalizing_at?: number;\n\n  /**\n   * The Unix timestamp (in seconds) for when the batch started processing.\n   */\n  in_progress_at?: number;\n\n  /**\n   * Set of key-value pairs that can be attached to an object. This can be useful for\n   * storing additional information about the object in a structured format.\n   */\n  metadata?: unknown | null;\n\n  /**\n   * The ID of the file containing the outputs of successfully executed requests.\n   */\n  output_file_id?: string;\n\n  /**\n   * The request counts for different statuses within the batch.\n   */\n  request_counts?: BatchRetrieveResponse.RequestCounts;\n}\n\nexport namespace BatchRetrieveResponse {\n  export interface Errors {\n    data?: Array<Errors.Data>;\n\n    /**\n     * The object type, which is always `list`.\n     */\n    object?: string;\n  }\n\n  export namespace Errors {\n    export interface Data {\n      /**\n       * An error code identifying the error type.\n       */\n      code?: string;\n\n      /**\n       * The line number of the input file where the error occurred, if applicable.\n       */\n      line?: number | null;\n\n      /**\n       * A human-readable message providing more details about the error.\n       */\n      message?: string;\n\n      /**\n       * The name of the parameter that caused the error, if applicable.\n       */\n      param?: string | null;\n    }\n  }\n\n  /**\n   * The request counts for different statuses within the batch.\n   */\n  export interface RequestCounts {\n    /**\n     * Number of requests that have been completed successfully.\n     */\n    completed: number;\n\n    /**\n     * Number of requests that have failed.\n     */\n    failed: number;\n\n    /**\n     * Total number of requests in the batch.\n     */\n    total: number;\n  }\n}\n\nexport interface BatchListResponse {\n  data: Array<BatchListResponse.Data>;\n\n  object: 'list';\n}\n\nexport namespace BatchListResponse {\n  export interface Data {\n    id: string;\n\n    /**\n     * The time frame within which the batch should be processed.\n     */\n    completion_window: string;\n\n    /**\n     * The Unix timestamp (in seconds) for when the batch was created.\n     */\n    created_at: number;\n\n    /**\n     * The API endpoint used by the batch.\n     */\n    endpoint: string;\n\n    /**\n     * The ID of the input file for the batch.\n     */\n    input_file_id: string;\n\n    /**\n     * The object type, which is always `batch`.\n     */\n    object: 'batch';\n\n    /**\n     * The current status of the batch.\n     */\n    status:\n      | 'validating'\n      | 'failed'\n      | 'in_progress'\n      | 'finalizing'\n      | 'completed'\n      | 'expired'\n      | 'cancelling'\n      | 'cancelled';\n\n    /**\n     * The Unix timestamp (in seconds) for when the batch was cancelled.\n     */\n    cancelled_at?: number;\n\n    /**\n     * The Unix timestamp (in seconds) for when the batch started cancelling.\n     */\n    cancelling_at?: number;\n\n    /**\n     * The Unix timestamp (in seconds) for when the batch was completed.\n     */\n    completed_at?: number;\n\n    /**\n     * The ID of the file containing the outputs of requests with errors.\n     */\n    error_file_id?: string;\n\n    errors?: Data.Errors;\n\n    /**\n     * The Unix timestamp (in seconds) for when the batch expired.\n     */\n    expired_at?: number;\n\n    /**\n     * The Unix timestamp (in seconds) for when the batch will expire.\n     */\n    expires_at?: number;\n\n    /**\n     * The Unix timestamp (in seconds) for when the batch failed.\n     */\n    failed_at?: number;\n\n    /**\n     * The Unix timestamp (in seconds) for when the batch started finalizing.\n     */\n    finalizing_at?: number;\n\n    /**\n     * The Unix timestamp (in seconds) for when the batch started processing.\n     */\n    in_progress_at?: number;\n\n    /**\n     * Set of key-value pairs that can be attached to an object. This can be useful for\n     * storing additional information about the object in a structured format.\n     */\n    metadata?: unknown | null;\n\n    /**\n     * The ID of the file containing the outputs of successfully executed requests.\n     */\n    output_file_id?: string;\n\n    /**\n     * The request counts for different statuses within the batch.\n     */\n    request_counts?: Data.RequestCounts;\n  }\n\n  export namespace Data {\n    export interface Errors {\n      data?: Array<Errors.Data>;\n\n      /**\n       * The object type, which is always `list`.\n       */\n      object?: string;\n    }\n\n    export namespace Errors {\n      export interface Data {\n        /**\n         * An error code identifying the error type.\n         */\n        code?: string;\n\n        /**\n         * The line number of the input file where the error occurred, if applicable.\n         */\n        line?: number | null;\n\n        /**\n         * A human-readable message providing more details about the error.\n         */\n        message?: string;\n\n        /**\n         * The name of the parameter that caused the error, if applicable.\n         */\n        param?: string | null;\n      }\n    }\n\n    /**\n     * The request counts for different statuses within the batch.\n     */\n    export interface RequestCounts {\n      /**\n       * Number of requests that have been completed successfully.\n       */\n      completed: number;\n\n      /**\n       * Number of requests that have failed.\n       */\n      failed: number;\n\n      /**\n       * Total number of requests in the batch.\n       */\n      total: number;\n    }\n  }\n}\n\nexport interface BatchCancelResponse {\n  id: string;\n\n  /**\n   * The time frame within which the batch should be processed.\n   */\n  completion_window: string;\n\n  /**\n   * The Unix timestamp (in seconds) for when the batch was created.\n   */\n  created_at: number;\n\n  /**\n   * The API endpoint used by the batch.\n   */\n  endpoint: string;\n\n  /**\n   * The ID of the input file for the batch.\n   */\n  input_file_id: string;\n\n  /**\n   * The object type, which is always `batch`.\n   */\n  object: 'batch';\n\n  /**\n   * The current status of the batch.\n   */\n  status:\n    | 'validating'\n    | 'failed'\n    | 'in_progress'\n    | 'finalizing'\n    | 'completed'\n    | 'expired'\n    | 'cancelling'\n    | 'cancelled';\n\n  /**\n   * The Unix timestamp (in seconds) for when the batch was cancelled.\n   */\n  cancelled_at?: number;\n\n  /**\n   * The Unix timestamp (in seconds) for when the batch started cancelling.\n   */\n  cancelling_at?: number;\n\n  /**\n   * The Unix timestamp (in seconds) for when the batch was completed.\n   */\n  completed_at?: number;\n\n  /**\n   * The ID of the file containing the outputs of requests with errors.\n   */\n  error_file_id?: string;\n\n  errors?: BatchCancelResponse.Errors;\n\n  /**\n   * The Unix timestamp (in seconds) for when the batch expired.\n   */\n  expired_at?: number;\n\n  /**\n   * The Unix timestamp (in seconds) for when the batch will expire.\n   */\n  expires_at?: number;\n\n  /**\n   * The Unix timestamp (in seconds) for when the batch failed.\n   */\n  failed_at?: number;\n\n  /**\n   * The Unix timestamp (in seconds) for when the batch started finalizing.\n   */\n  finalizing_at?: number;\n\n  /**\n   * The Unix timestamp (in seconds) for when the batch started processing.\n   */\n  in_progress_at?: number;\n\n  /**\n   * Set of key-value pairs that can be attached to an object. This can be useful for\n   * storing additional information about the object in a structured format.\n   */\n  metadata?: unknown | null;\n\n  /**\n   * The ID of the file containing the outputs of successfully executed requests.\n   */\n  output_file_id?: string;\n\n  /**\n   * The request counts for different statuses within the batch.\n   */\n  request_counts?: BatchCancelResponse.RequestCounts;\n}\n\nexport namespace BatchCancelResponse {\n  export interface Errors {\n    data?: Array<Errors.Data>;\n\n    /**\n     * The object type, which is always `list`.\n     */\n    object?: string;\n  }\n\n  export namespace Errors {\n    export interface Data {\n      /**\n       * An error code identifying the error type.\n       */\n      code?: string;\n\n      /**\n       * The line number of the input file where the error occurred, if applicable.\n       */\n      line?: number | null;\n\n      /**\n       * A human-readable message providing more details about the error.\n       */\n      message?: string;\n\n      /**\n       * The name of the parameter that caused the error, if applicable.\n       */\n      param?: string | null;\n    }\n  }\n\n  /**\n   * The request counts for different statuses within the batch.\n   */\n  export interface RequestCounts {\n    /**\n     * Number of requests that have been completed successfully.\n     */\n    completed: number;\n\n    /**\n     * Number of requests that have failed.\n     */\n    failed: number;\n\n    /**\n     * Total number of requests in the batch.\n     */\n    total: number;\n  }\n}\n\nexport interface BatchCreateParams {\n  /**\n   * The time frame within which the batch should be processed. Durations from `24h`\n   * to `7d` are supported.\n   */\n  completion_window: string;\n\n  /**\n   * The endpoint to be used for all requests in the batch. Currently\n   * `/v1/chat/completions` is supported.\n   */\n  endpoint: '/v1/chat/completions';\n\n  /**\n   * The ID of an uploaded file that contains requests for the new batch.\n   *\n   * See [upload file](/docs/api-reference#files-upload) for how to upload a file.\n   *\n   * Your input file must be formatted as a [JSONL file](/docs/batch), and must be\n   * uploaded with the purpose `batch`. The file can be up to 100 MB in size.\n   */\n  input_file_id: string;\n\n  /**\n   * Optional custom metadata for the batch.\n   */\n  metadata?: Record<string, string> | null;\n}\n\nexport declare namespace Batches {\n  export {\n    type BatchCreateResponse as BatchCreateResponse,\n    type BatchRetrieveResponse as BatchRetrieveResponse,\n    type BatchListResponse as BatchListResponse,\n    type BatchCancelResponse as BatchCancelResponse,\n    type BatchCreateParams as BatchCreateParams,\n  };\n}\n"],"mappings":"AAAA;SAESA,WAAW,QAAE;AAGtB,OAAM,MAAOC,OAAQ,SAAQD,WAAW;EACtC;;;;EAIAE,MAAMA,CAACC,IAAuB,EAAEC,OAA6B;IAC3D,OAAO,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,oBAAoB,EAAE;MAAEH,IAAI;MAAE,GAAGC;IAAO,CAAE,CAAC;EACtE;EAEA;;;EAGAG,QAAQA,CAACC,OAAe,EAAEJ,OAA6B;IACrD,OAAO,IAAI,CAACC,OAAO,CAACI,GAAG,CAAC,sBAAsBD,OAAO,EAAE,EAAEJ,OAAO,CAAC;EACnE;EAEA;;;EAGAM,IAAIA,CAACN,OAA6B;IAChC,OAAO,IAAI,CAACC,OAAO,CAACI,GAAG,CAAC,oBAAoB,EAAEL,OAAO,CAAC;EACxD;EAEA;;;EAGAO,MAAMA,CAACH,OAAe,EAAEJ,OAA6B;IACnD,OAAO,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,sBAAsBE,OAAO,SAAS,EAAEJ,OAAO,CAAC;EAC3E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}