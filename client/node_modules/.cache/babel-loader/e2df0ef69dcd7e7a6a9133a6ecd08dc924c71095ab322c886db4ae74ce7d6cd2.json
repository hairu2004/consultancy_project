{"ast":null,"code":"// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../resource.mjs\";\nimport * as Core from \"../../core.mjs\";\nexport class Translations extends APIResource {\n  /**\n   * Translates audio into English.\n   */\n  create(body, options) {\n    return this._client.post('/openai/v1/audio/translations', Core.multipartFormRequestOptions({\n      body,\n      ...options\n    }));\n  }\n}","map":{"version":3,"names":["APIResource","Core","Translations","create","body","options","_client","post","multipartFormRequestOptions"],"sources":["D:\\KEC\\sem6\\consultancy_project\\qa-automation-system - Copy\\client\\node_modules\\groq-sdk\\src\\resources\\audio\\translations.ts"],"sourcesContent":["// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { APIResource } from '../../resource';\nimport * as Core from '../../core';\n\nexport class Translations extends APIResource {\n  /**\n   * Translates audio into English.\n   */\n  create(body: TranslationCreateParams, options?: Core.RequestOptions): Core.APIPromise<Translation> {\n    return this._client.post(\n      '/openai/v1/audio/translations',\n      Core.multipartFormRequestOptions({ body, ...options }),\n    );\n  }\n}\n\nexport interface Translation {\n  text: string;\n}\n\nexport interface TranslationCreateParams {\n  /**\n   * ID of the model to use. Only `whisper-large-v3` is currently available.\n   */\n  model: (string & {}) | 'whisper-large-v3';\n\n  /**\n   * The audio file object (not file name) translate, in one of these formats: flac,\n   * mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.\n   */\n  file?: Core.Uploadable;\n\n  /**\n   * An optional text to guide the model's style or continue a previous audio\n   * segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in\n   * English.\n   */\n  prompt?: string;\n\n  /**\n   * The format of the transcript output, in one of these options: `json`, `text`, or\n   * `verbose_json`.\n   */\n  response_format?: 'json' | 'text' | 'verbose_json';\n\n  /**\n   * The sampling temperature, between 0 and 1. Higher values like 0.8 will make the\n   * output more random, while lower values like 0.2 will make it more focused and\n   * deterministic. If set to 0, the model will use\n   * [log probability](https://en.wikipedia.org/wiki/Log_probability) to\n   * automatically increase the temperature until certain thresholds are hit.\n   */\n  temperature?: number;\n\n  /**\n   * The audio URL to translate/transcribe (supports Base64URL). Either file or url\n   * must be provided. When using the Batch API only url is supported.\n   */\n  url?: string;\n}\n\nexport declare namespace Translations {\n  export { type Translation as Translation, type TranslationCreateParams as TranslationCreateParams };\n}\n"],"mappings":"AAAA;SAESA,WAAW,QAAE;OACf,KAAKC,IAAI;AAEhB,OAAM,MAAOC,YAAa,SAAQF,WAAW;EAC3C;;;EAGAG,MAAMA,CAACC,IAA6B,EAAEC,OAA6B;IACjE,OAAO,IAAI,CAACC,OAAO,CAACC,IAAI,CACtB,+BAA+B,EAC/BN,IAAI,CAACO,2BAA2B,CAAC;MAAEJ,IAAI;MAAE,GAAGC;IAAO,CAAE,CAAC,CACvD;EACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}