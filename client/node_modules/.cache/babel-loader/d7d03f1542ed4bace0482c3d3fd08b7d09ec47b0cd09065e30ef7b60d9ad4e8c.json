{"ast":null,"code":"var _jsxFileName = \"D:\\\\KEC\\\\sem6\\\\consultancy project\\\\qa-automation-system\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [file, setFile] = useState(null);\n  const [uploadStatus, setUploadStatus] = useState('');\n  const [requirements, setRequirements] = useState(null);\n  const [testResults, setTestResults] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [progress, setProgress] = useState('');\n  const ALLOWED_TYPES = ['application/pdf', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'];\n  useEffect(() => {\n    const ws = new WebSocket(`ws://${window.location.hostname}:5000`);\n    ws.onmessage = e => {\n      const data = JSON.parse(e.data);\n      if (data.type === 'progress') {\n        setProgress(data.message);\n      }\n    };\n    return () => ws.close();\n  }, []);\n  const handleFileChange = e => {\n    const selectedFile = e.target.files[0];\n    if (!selectedFile) return;\n    setRequirements(null);\n    setTestResults(null);\n    setUploadStatus('');\n    setProgress('');\n    if (!ALLOWED_TYPES.includes(selectedFile.type)) {\n      setUploadStatus('Error: Only PDF and DOCX files are allowed');\n      return;\n    }\n    if (selectedFile.size > 5 * 1024 * 1024) {\n      setUploadStatus('Error: File size must be less than 5MB');\n      return;\n    }\n    setFile(selectedFile);\n  };\n  const handleUpload = async e => {\n    e.preventDefault();\n    if (!file) {\n      setUploadStatus('Please select a valid file first');\n      return;\n    }\n    const formData = new FormData();\n    formData.append('srsDocument', file);\n    try {\n      setIsLoading(true);\n      setUploadStatus('Uploading and analyzing document...');\n      setProgress('Starting analysis...');\n      await axios.get(`http://${window.location.hostname}:5000/api/health`, {\n        timeout: 5000\n      });\n      const res = await axios.post(`http://${window.location.hostname}:5000/api/upload`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        },\n        timeout: 30000\n      });\n      setRequirements(res.data);\n      setUploadStatus(res.data.analysisStatus === 'failed' ? 'Analysis completed with warnings' : 'Analysis complete!');\n      setProgress('');\n    } catch (err) {\n      let errorMsg = 'Processing failed. Please try again.';\n      let details = '';\n      if (err.code === 'ECONNABORTED') {\n        errorMsg = 'Request timeout (30s) exceeded';\n        details = 'Backend took too long to respond';\n      } else if (err.response) {\n        details = err.response.data.details || '';\n        errorMsg = err.response.data.error || errorMsg;\n      } else if (err.request) {\n        details = 'Cannot connect to backend server';\n      } else {\n        details = err.message;\n      }\n      setUploadStatus(errorMsg);\n      setTestResults({\n        error: errorMsg,\n        details\n      });\n      setProgress('');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const runTests = async () => {\n    if (!(requirements !== null && requirements !== void 0 && requirements.testScript)) return;\n    try {\n      setIsLoading(true);\n      setUploadStatus('Running tests...');\n      setTestResults(null);\n      setProgress('Initializing test environment...');\n      await axios.get(`http://${window.location.hostname}:5000/api/health`, {\n        timeout: 5000\n      });\n      const res = await axios.post(`http://${window.location.hostname}:5000/api/run-tests`, {\n        testScript: requirements.testScript\n      }, {\n        timeout: 120000,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      setTestResults(res.data);\n      setUploadStatus(res.data.passed ? '✓ Tests passed!' : '✗ Tests failed');\n      setProgress('');\n      if (res.data.passed !== undefined) {\n        const reportRes = await axios.get(`http://${window.location.hostname}:5000/api/report/${Date.now()}`, {\n          responseType: 'blob'\n        });\n        const url = window.URL.createObjectURL(new Blob([reportRes.data]));\n        const link = document.createElement('a');\n        link.href = url;\n        link.setAttribute('download', `QA_Report_${new Date().toISOString()}.pdf`);\n        document.body.appendChild(link);\n        link.click();\n      }\n    } catch (err) {\n      var _err$response, _err$response$data;\n      let errorMsg = 'Test execution failed';\n      let details = '';\n      if (err.code === 'ECONNABORTED') {\n        errorMsg = 'Test timeout (120s) exceeded';\n        details = 'Tests took too long to execute';\n      } else if (err.response) {\n        details = err.response.data.details || '';\n        errorMsg = err.response.data.error || errorMsg;\n      } else if (err.request) {\n        details = 'Backend connection failed';\n      } else {\n        details = err.message;\n      }\n      setUploadStatus(errorMsg);\n      setTestResults({\n        error: errorMsg,\n        details,\n        logs: ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.logs) || ''\n      });\n      setProgress('');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gray-100 p-4 md:p-8\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-5xl mx-auto space-y-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-3xl font-bold text-blue-700\",\n        children: \"AUTOMATED QA SYSTEM USING AI AGENTS AND PLAYWRIGHT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-6 rounded-lg shadow-md space-y-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"section\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-xl font-semibold text-gray-800\",\n            children: \"QA - Quality Assurance\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-gray-700 mt-1\",\n            children: \"QA ensures that software meets specified requirements and functions as expected without bugs or errors. It involves both manual and automated testing.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-xl font-semibold text-gray-800\",\n            children: \"AI Agent Responsibilities\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"list-disc pl-6 text-gray-700 space-y-1\",\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"\\uD83D\\uDCD6 Read and analyze the SRS document\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"\\uD83E\\uDDEA Generate test cases to validate system behavior\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"\\u2699\\uFE0F Automate testing by converting test cases into Playwright scripts\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"\\uD83D\\uDCCB Generate reports summarizing test results and failures\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-xl font-semibold text-gray-800\",\n            children: \"SRS (Software Requirements Specification)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-gray-700 mt-1\",\n            children: \"The SRS outlines the desired features, functionalities, and constraints of a software application. It forms the foundation for creating test cases as it clearly defines what needs to be validated.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-xl font-semibold text-gray-800\",\n            children: \"Playwright\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-gray-700 mt-1\",\n            children: \"Playwright is an open-source automation framework for web application testing. It supports:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"list-disc pl-6 text-gray-700\",\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"\\u2705 Cross-browser testing\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"\\u2705 Cross-platform testing\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"uSbwgV85uyt5MrE4ROemeQIVdq4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","axios","jsxDEV","_jsxDEV","App","_s","file","setFile","uploadStatus","setUploadStatus","requirements","setRequirements","testResults","setTestResults","isLoading","setIsLoading","progress","setProgress","ALLOWED_TYPES","ws","WebSocket","window","location","hostname","onmessage","e","data","JSON","parse","type","message","close","handleFileChange","selectedFile","target","files","includes","size","handleUpload","preventDefault","formData","FormData","append","get","timeout","res","post","headers","analysisStatus","err","errorMsg","details","code","response","error","request","runTests","testScript","passed","undefined","reportRes","Date","now","responseType","url","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","toISOString","body","appendChild","click","_err$response","_err$response$data","logs","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/KEC/sem6/consultancy project/qa-automation-system/client/src/App.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nfunction App() {\n  const [file, setFile] = useState(null);\n  const [uploadStatus, setUploadStatus] = useState('');\n  const [requirements, setRequirements] = useState(null);\n  const [testResults, setTestResults] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [progress, setProgress] = useState('');\n\n  const ALLOWED_TYPES = [\n    'application/pdf',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\n  ];\n\n  useEffect(() => {\n    const ws = new WebSocket(`ws://${window.location.hostname}:5000`);\n    ws.onmessage = (e) => {\n      const data = JSON.parse(e.data);\n      if (data.type === 'progress') {\n        setProgress(data.message);\n      }\n    };\n    return () => ws.close();\n  }, []);\n\n  const handleFileChange = (e) => {\n    const selectedFile = e.target.files[0];\n    if (!selectedFile) return;\n\n    setRequirements(null);\n    setTestResults(null);\n    setUploadStatus('');\n    setProgress('');\n\n    if (!ALLOWED_TYPES.includes(selectedFile.type)) {\n      setUploadStatus('Error: Only PDF and DOCX files are allowed');\n      return;\n    }\n\n    if (selectedFile.size > 5 * 1024 * 1024) {\n      setUploadStatus('Error: File size must be less than 5MB');\n      return;\n    }\n\n    setFile(selectedFile);\n  };\n\n  const handleUpload = async (e) => {\n    e.preventDefault();\n    if (!file) {\n      setUploadStatus('Please select a valid file first');\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append('srsDocument', file);\n\n    try {\n      setIsLoading(true);\n      setUploadStatus('Uploading and analyzing document...');\n      setProgress('Starting analysis...');\n\n      await axios.get(`http://${window.location.hostname}:5000/api/health`, { timeout: 5000 });\n\n      const res = await axios.post(`http://${window.location.hostname}:5000/api/upload`, formData, {\n        headers: { 'Content-Type': 'multipart/form-data' },\n        timeout: 30000\n      });\n\n      setRequirements(res.data);\n      setUploadStatus(\n        res.data.analysisStatus === 'failed'\n          ? 'Analysis completed with warnings'\n          : 'Analysis complete!'\n      );\n      setProgress('');\n    } catch (err) {\n      let errorMsg = 'Processing failed. Please try again.';\n      let details = '';\n\n      if (err.code === 'ECONNABORTED') {\n        errorMsg = 'Request timeout (30s) exceeded';\n        details = 'Backend took too long to respond';\n      } else if (err.response) {\n        details = err.response.data.details || '';\n        errorMsg = err.response.data.error || errorMsg;\n      } else if (err.request) {\n        details = 'Cannot connect to backend server';\n      } else {\n        details = err.message;\n      }\n\n      setUploadStatus(errorMsg);\n      setTestResults({ error: errorMsg, details });\n      setProgress('');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const runTests = async () => {\n    if (!requirements?.testScript) return;\n\n    try {\n      setIsLoading(true);\n      setUploadStatus('Running tests...');\n      setTestResults(null);\n      setProgress('Initializing test environment...');\n\n      await axios.get(`http://${window.location.hostname}:5000/api/health`, { timeout: 5000 });\n\n      const res = await axios.post(`http://${window.location.hostname}:5000/api/run-tests`, {\n        testScript: requirements.testScript\n      }, {\n        timeout: 120000,\n        headers: { 'Content-Type': 'application/json' }\n      });\n\n      setTestResults(res.data);\n      setUploadStatus(res.data.passed ? '✓ Tests passed!' : '✗ Tests failed');\n      setProgress('');\n\n      if (res.data.passed !== undefined) {\n        const reportRes = await axios.get(`http://${window.location.hostname}:5000/api/report/${Date.now()}`, {\n          responseType: 'blob'\n        });\n        const url = window.URL.createObjectURL(new Blob([reportRes.data]));\n        const link = document.createElement('a');\n        link.href = url;\n        link.setAttribute('download', `QA_Report_${new Date().toISOString()}.pdf`);\n        document.body.appendChild(link);\n        link.click();\n      }\n\n    } catch (err) {\n      let errorMsg = 'Test execution failed';\n      let details = '';\n\n      if (err.code === 'ECONNABORTED') {\n        errorMsg = 'Test timeout (120s) exceeded';\n        details = 'Tests took too long to execute';\n      } else if (err.response) {\n        details = err.response.data.details || '';\n        errorMsg = err.response.data.error || errorMsg;\n      } else if (err.request) {\n        details = 'Backend connection failed';\n      } else {\n        details = err.message;\n      }\n\n      setUploadStatus(errorMsg);\n      setTestResults({\n        error: errorMsg,\n        details,\n        logs: err.response?.data?.logs || ''\n      });\n      setProgress('');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-100 p-4 md:p-8\">\n      <div className=\"max-w-5xl mx-auto space-y-6\">\n        <h1 className=\"text-3xl font-bold text-blue-700\">AUTOMATED QA SYSTEM USING AI AGENTS AND PLAYWRIGHT</h1>\n\n        {/* Informational Section */}\n        <div className=\"bg-white p-6 rounded-lg shadow-md space-y-4\">\n          <section>\n            <h2 className=\"text-xl font-semibold text-gray-800\">QA - Quality Assurance</h2>\n            <p className=\"text-gray-700 mt-1\">\n              QA ensures that software meets specified requirements and functions as expected without bugs or errors.\n              It involves both manual and automated testing.\n            </p>\n          </section>\n          <section>\n            <h2 className=\"text-xl font-semibold text-gray-800\">AI Agent Responsibilities</h2>\n            <ul className=\"list-disc pl-6 text-gray-700 space-y-1\">\n              <li>📖 Read and analyze the SRS document</li>\n              <li>🧪 Generate test cases to validate system behavior</li>\n              <li>⚙️ Automate testing by converting test cases into Playwright scripts</li>\n              <li>📋 Generate reports summarizing test results and failures</li>\n            </ul>\n          </section>\n          <section>\n            <h2 className=\"text-xl font-semibold text-gray-800\">SRS (Software Requirements Specification)</h2>\n            <p className=\"text-gray-700 mt-1\">\n              The SRS outlines the desired features, functionalities, and constraints of a software application.\n              It forms the foundation for creating test cases as it clearly defines what needs to be validated.\n            </p>\n          </section>\n          <section>\n            <h2 className=\"text-xl font-semibold text-gray-800\">Playwright</h2>\n            <p className=\"text-gray-700 mt-1\">\n              Playwright is an open-source automation framework for web application testing. It supports:\n            </p>\n            <ul className=\"list-disc pl-6 text-gray-700\">\n              <li>✅ Cross-browser testing</li>\n              <li>✅ Cross-platform testing</li>\n            </ul>\n          </section>\n        </div>\n\n        {/* Existing Upload & Test UI */}\n        {/* The rest of your code follows here (unchanged)... */}\n        {/* From your upload form to test results display */}\n        {/* Already included above */}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}